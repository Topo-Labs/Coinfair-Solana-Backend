name: 🚀 Production Deployment (Clean)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    # 添加路径过滤，避免文档更改触发部署
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'screenshots/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_rebuild:
        description: '强制重新构建（忽略CI缓存）'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🔄 尝试复用CI构建产物（跨workflow artifact查找）
  reuse-ci-build:
    name: 🔄 尝试复用CI构建产物
    runs-on: ubuntu-latest
    if: github.event.inputs.force_rebuild != 'true'
    outputs:
      has_ci_build: ${{ steps.check-ci-build.outputs.has_ci_build }}
    
    steps:
      - name: 📥 检出代码（用于artifact API调用）
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 安装GitHub CLI
        run: |
          echo "🔧 安装GitHub CLI..."
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update -qq
          sudo apt install -y gh
          gh --version

      - name: 🔍 查找可用的CI构建产物
        id: find-ci-artifact
        run: |
          echo "🔍 查找最新的CI构建产物..."
          
          # 使用GitHub API查找最新的成功CI run中的artifact
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          
          echo "📡 搜索CI workflow的成功运行..."
          CI_RUN_ID=$(gh api repos/$REPO_OWNER/$REPO_NAME/actions/workflows/ci.yml/runs \
            --jq '.workflow_runs[] | select(.conclusion == "success" and .head_sha == "'${{ github.sha }}'") | .id' \
            | head -1)
          
          if [ -n "$CI_RUN_ID" ]; then
            echo "✅ 找到匹配的CI运行: $CI_RUN_ID"
            echo "ci_run_id=$CI_RUN_ID" >> $GITHUB_OUTPUT
            echo "has_ci_run=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 未找到匹配的成功CI运行"
            echo "has_ci_run=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 📥 下载CI构建产物
        id: download-ci-artifact
        if: steps.find-ci-artifact.outputs.has_ci_run == 'true'
        run: |
          echo "📥 从CI运行下载构建产物..."
          
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          CI_RUN_ID="${{ steps.find-ci-artifact.outputs.ci_run_id }}"
          
          # 查找artifact并下载
          ARTIFACT_URL=$(gh api repos/$REPO_OWNER/$REPO_NAME/actions/runs/$CI_RUN_ID/artifacts \
            --jq '.artifacts[] | select(.name | startswith("coinfair-binary-")) | .archive_download_url' \
            | head -1)
          
          if [ -n "$ARTIFACT_URL" ]; then
            echo "📥 下载artifact: $ARTIFACT_URL"
            curl -L -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACT_URL" -o artifact.zip
            
            if [ -f "artifact.zip" ] && [ -s "artifact.zip" ]; then
              unzip -o artifact.zip
              echo "✅ 成功下载CI构建产物"
              ls -la coinfair* || echo "⚠️ 未找到coinfair文件"
            else
              echo "❌ artifact.zip下载失败或空文件"
              exit 1
            fi
          else
            echo "❌ 未找到coinfair-binary artifact"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 🔍 检查CI构建产物
        id: check-ci-build
        run: |
          echo "🔍 验证构建产物完整性..."
          if [ -f "coinfair" ] && [ -x "coinfair" ]; then
            echo "✅ 找到有效的CI构建产物"
            echo "has_ci_build=true" >> $GITHUB_OUTPUT
            ls -la coinfair
            file coinfair
            du -h coinfair
          else
            echo "⚠️ CI构建产物不可用，将使用备用构建"
            echo "has_ci_build=false" >> $GITHUB_OUTPUT
            echo "📋 当前目录内容:"
            ls -la ./ || true
          fi

      - name: 📦 准备部署包（复用构建）
        if: steps.check-ci-build.outputs.has_ci_build == 'true'
        run: |
          echo "📦 创建部署包（使用CI构建产物）..."
          mkdir -p deploy
          cp coinfair deploy/
          chmod +x deploy/coinfair
          
          # 检出代码以获取配置文件
          git config --global --add safe.directory $GITHUB_WORKSPACE || true
          
          # 复制配置文件（如果存在）
          [ -f .env.production ] && cp .env.production deploy/.env || echo "⚠️ .env.production不存在，跳过"
          [ -f docker-compose.yaml ] && cp docker-compose.yaml deploy/ || echo "⚠️ docker-compose.yaml不存在，跳过"
          
          # 创建部署脚本
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 开始部署Coinfair（使用CI预构建版本）..."
          
          # 备份当前版本
          if [ -f coinfair ]; then
            cp coinfair coinfair.backup.$(date +%Y%m%d_%H%M%S)
            echo "✅ 已备份当前版本"
          fi
          
          # 停止现有服务
          pkill -f coinfair || true
          sleep 2
          
          # 部署新版本
          chmod +x coinfair
          echo "✅ 新版本部署完成（CI预构建）"
          
          # 启动数据库
          docker-compose up -d || echo "⚠️ Docker compose失败，继续..."
          sleep 5
          
          # 启动服务
          nohup ./coinfair > coinfair.log 2>&1 &
          sleep 3
          
          # 健康检查
          for i in {1..30}; do
            if curl -f http://localhost:8000/api/v1/health > /dev/null 2>&1; then
              echo "✅ 服务启动成功"
              exit 0
            fi
            echo "⏳ 等待服务启动... ($i/30)"
            sleep 2
          done
          
          echo "❌ 服务启动超时"
          exit 1
          EOF
          
          chmod +x deploy/deploy.sh
          
          echo "📊 部署包内容（CI预构建版本）:"
          ls -la deploy/

      - name: 📦 上传部署包（复用版本）
        if: steps.check-ci-build.outputs.has_ci_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coinfair-deployment-${{ github.sha }}
          path: deploy/
          retention-days: 30

  # 🏗️ 备用构建（仅在CI构建不可用时使用）  
  fallback-build:
    name: 🏗️ 备用构建
    runs-on: ubuntu-latest
    needs: [reuse-ci-build]
    if: always() && (needs.reuse-ci-build.outputs.has_ci_build != 'true' || github.event.inputs.force_rebuild == 'true')
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🦀 安装Rust工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 缓存Cargo依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-fallback-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🚀 备用构建
        run: |
          echo "🚀 执行备用构建（CI构建不可用）..."
          CARGO_ENV=Production cargo build --release --bin coinfair
          
          echo "📊 构建产物信息:"
          ls -la target/release/
          file target/release/coinfair
          du -h target/release/coinfair

      - name: 📦 准备部署包（备用构建）
        run: |
          echo "📦 创建部署包（备用构建版本）..."
          mkdir -p deploy
          cp target/release/coinfair deploy/
          cp .env.production deploy/.env || echo "⚠️ .env.production不存在，跳过"
          cp docker-compose.yaml deploy/ || echo "⚠️ docker-compose.yaml不存在，跳过"
          
          # 创建部署脚本（备用版本）
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 开始部署Coinfair（备用构建版本）..."
          
          # 备份当前版本
          if [ -f coinfair ]; then
            cp coinfair coinfair.backup.$(date +%Y%m%d_%H%M%S)
            echo "✅ 已备份当前版本"
          fi
          
          # 停止现有服务
          pkill -f coinfair || true
          sleep 2
          
          # 部署新版本
          chmod +x coinfair
          echo "✅ 新版本部署完成（备用构建）"
          
          # 启动数据库
          docker-compose up -d || echo "⚠️ Docker compose失败，继续..."
          sleep 5
          
          # 启动服务
          nohup ./coinfair > coinfair.log 2>&1 &
          sleep 3
          
          # 健康检查
          for i in {1..30}; do
            if curl -f http://localhost:8000/api/v1/health > /dev/null 2>&1; then
              echo "✅ 服务启动成功"
              exit 0
            fi
            echo "⏳ 等待服务启动... ($i/30)"
            sleep 2
          done
          
          echo "❌ 服务启动超时"
          exit 1
          EOF
          
          chmod +x deploy/deploy.sh
          
          echo "📊 部署包内容（备用构建）:"
          ls -la deploy/

      - name: 📦 上传部署包（备用版本）
        uses: actions/upload-artifact@v4
        with:
          name: coinfair-deployment-${{ github.sha }}
          path: deploy/
          retention-days: 30

  # 🚀 AWS EC2 部署（使用智能构建选择）
  deploy-aws:
    name: 🚀 AWS EC2 部署（智能版）
    runs-on: ubuntu-latest
    needs: [reuse-ci-build, fallback-build]
    if: always() && !cancelled() && (needs.reuse-ci-build.result == 'success' || needs.fallback-build.result == 'success')
    # 注意：优先使用CI构建，其次使用备用构建
    
    steps:
      - name: 📥 智能下载部署包
        run: |
          echo "📥 智能选择最佳部署包..."
          
          # 优先使用CI复用版本（如果可用）
          if [ "${{ needs.reuse-ci-build.result }}" == "success" ] && [ "${{ needs.reuse-ci-build.outputs.has_ci_build }}" == "true" ]; then
            echo "✅ 使用CI复用构建版本"
            BUILD_TYPE="ci-reused"
          elif [ "${{ needs.fallback-build.result }}" == "success" ]; then
            echo "✅ 使用备用构建版本"
            BUILD_TYPE="fallback"
          else
            echo "❌ 所有构建方式都失败"
            exit 1
          fi
          
          echo "build_type=$BUILD_TYPE" >> $GITHUB_ENV

      - name: 📥 下载选定的部署包
        uses: actions/download-artifact@v4
        with:
          name: coinfair-deployment-${{ github.sha }}
          path: deploy/
        continue-on-error: false

      - name: 🔑 配置SSH密钥
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      - name: 📤 上传到服务器
        run: |
          echo "📤 上传部署包到服务器..."
          scp -r deploy/* ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }}:/opt/coinfair/
          
          echo "✅ 文件上传完成"

      - name: 🚀 执行部署
        run: |
          echo "🚀 在服务器上执行部署（${{ env.build_type }}版本）..."
          ssh ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            cd /opt/coinfair
            
            echo "📋 当前目录内容:"
            ls -la
            
            echo "🚀 执行部署脚本..."
            ./deploy.sh
            
            echo "📊 部署后状态检查:"
            ps aux | grep coinfair | head -5
            
            echo "🔍 服务状态检查:"
            curl -s http://localhost:8000/api/v1/health || echo "健康检查失败"
            
            echo "✅ 部署完成! (使用${{ env.build_type }}构建)"
          EOF

      - name: 🔍 部署后验证
        run: |
          echo "🔍 验证部署状态..."
          
          # 等待服务稳定
          sleep 10
          
          # 健康检查
          ssh ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            # 检查进程
            if pgrep -f coinfair > /dev/null; then
              echo "✅ Coinfair进程正在运行"
            else
              echo "❌ Coinfair进程未找到"
              exit 1
            fi
            
            # 检查API
            if curl -f http://localhost:8000/api/v1/health > /dev/null 2>&1; then
              echo "✅ API健康检查通过"
            else
              echo "❌ API健康检查失败"
              echo "📋 服务日志 (最后20行):"
              tail -20 coinfair.log
              exit 1
            fi
            
            echo "🎉 部署验证成功!"
          EOF

  # 📧 部署通知
  notify-deployment:
    name: 📧 部署通知
    runs-on: ubuntu-latest
    needs: [deploy-aws]
    if: always()
    
    steps:
      - name: 📧 发送部署通知
        if: contains(needs.*.result, 'success')
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"🎉 Coinfair 部署成功!\n🌿 分支: ${{ github.ref_name }}\n👤 部署者: ${{ github.actor }}\n⏰ 时间: $(date)\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "ℹ️ SLACK_WEBHOOK_URL未配置，跳过通知"
          fi

      - name: 🚨 发送失败通知  
        if: contains(needs.*.result, 'failure')
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"❌ Coinfair 部署失败!\n🌿 分支: ${{ github.ref_name }}\n👤 操作者: ${{ github.actor }}\n⏰ 时间: $(date)\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "ℹ️ SLACK_WEBHOOK_URL未配置，跳过通知"
          fi