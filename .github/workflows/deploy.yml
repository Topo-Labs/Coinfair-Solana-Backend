name: 🚀 Production Deployment (Simplified)

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    # 添加路径过滤，避免文档更改触发部署
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'screenshots/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🏗️ 构建和部署（简化版）
  build-and-deploy:
    name: 🏗️ 构建和部署
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🦀 安装Rust工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 📦 缓存Cargo依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-deploy-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 🚀 构建发布版本
        run: |
          echo "🚀 开始构建生产版本..."
          CARGO_ENV=Production cargo build --release --bin coinfair
          
          echo "📊 构建产物信息:"
          ls -la target/release/
          file target/release/coinfair
          du -h target/release/coinfair

      - name: 📦 准备部署包
        run: |
          echo "📦 创建部署包..."
          mkdir -p deploy
          cp target/release/coinfair deploy/
          cp .env.production deploy/.env || echo "⚠️ .env.production不存在，跳过"
          cp docker-compose.yaml deploy/ || echo "⚠️ docker-compose.yaml不存在，跳过"
          
          # 创建部署脚本
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 开始部署Coinfair..."
          
          # 备份当前版本
          if [ -f coinfair ]; then
            cp coinfair coinfair.backup.$(date +%Y%m%d_%H%M%S)
            echo "✅ 已备份当前版本"
          fi
          
          # 部署新版本（服务已在上传前停止）
          chmod +x coinfair
          echo "✅ 新版本部署完成"
          
          # 启动数据库
          docker-compose up -d || echo "⚠️ Docker compose失败，继续..."
          sleep 5
          
          # 启动服务
          nohup ./coinfair > coinfair.log 2>&1 &
          sleep 3
          
          # 健康检查
          for i in {1..30}; do
            if curl -f http://localhost:8000/api/v1/health > /dev/null 2>&1; then
              echo "✅ 服务启动成功"
              exit 0
            fi
            echo "⏳ 等待服务启动... ($i/30)"
            sleep 2
          done
          
          echo "❌ 服务启动超时"
          exit 1
          EOF
          
          chmod +x deploy/deploy.sh
          
          echo "📊 部署包内容:"
          ls -la deploy/

      - name: 🔑 配置SSH密钥
        run: |
          echo "🔑 配置SSH连接..."
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "🔍 验证私钥格式..."
          head -1 ~/.ssh/id_rsa | grep -q "BEGIN" && echo "✅ 私钥格式正确" || echo "❌ 私钥格式异常"
          
          echo "🔍 获取服务器指纹..."
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "❌ 无法获取服务器指纹"
          
          echo "🔍 测试网络连接..."
          ping -c 2 ${{ secrets.AWS_HOST }} || echo "❌ ping失败"
          nc -zv ${{ secrets.AWS_HOST }} 22 || echo "❌ SSH端口不可达"

      - name: 🧪 SSH连接测试
        run: |
          echo "🧪 测试SSH连接..."
          ssh -vvv -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
              ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} \
              "echo '✅ SSH连接成功'; hostname; whoami; pwd" 2>&1 || \
              { echo "❌ SSH连接失败"; exit 1; }

      - name: 📤 上传到服务器
        run: |
          echo "📤 停止旧服务以释放文件..."
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
              ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} \
              "pkill -f coinfair || true" || \
              { echo "❌ 停止服务命令失败"; exit 1; }
          sleep 2
          
          echo "📤 上传部署包到服务器..."
          scp -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
              -r deploy/* ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }}:/home/ubuntu/Topo/Coinfair-Solana-Backend/ || \
              { echo "❌ 文件上传失败"; exit 1; }
          
          echo "✅ 文件上传完成"

      - name: 🚀 执行部署
        run: |
          echo "🚀 在服务器上执行部署..."
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
              ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            cd /home/ubuntu/Topo/Coinfair-Solana-Backend
            
            echo "📋 当前目录内容:"
            ls -la
            
            echo "🚀 执行部署脚本..."
            ./deploy.sh
            
            echo "📊 部署后状态检查:"
            ps aux | grep coinfair | head -5
            
            echo "🔍 服务状态检查:"
            curl -s http://localhost:8000/api/v1/health || echo "健康检查失败"
            
            echo "✅ 部署完成!"
          EOF

      - name: 🔍 部署后验证
        run: |
          echo "🔍 验证部署状态..."
          
          # 等待服务稳定
          sleep 10
          
          # 健康检查
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no \
              ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            # 检查进程
            if pgrep -f coinfair > /dev/null; then
              echo "✅ Coinfair进程正在运行"
            else
              echo "❌ Coinfair进程未找到"
              exit 1
            fi
            
            # 检查API
            if curl -f http://localhost:8000/api/v1/health > /dev/null 2>&1; then
              echo "✅ API健康检查通过"
            else
              echo "❌ API健康检查失败"
              echo "📋 服务日志 (最后20行):"
              tail -20 coinfair.log
              exit 1
            fi
            
            echo "🎉 部署验证成功!"
          EOF

  # 📧 部署通知
  notify-deployment:
    name: 📧 部署通知
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
      - name: 📧 发送部署成功通知
        if: needs.build-and-deploy.result == 'success'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"🎉 Coinfair 部署成功!\\n🌿 分支: ${{ github.ref_name }}\\n👤 部署者: ${{ github.actor }}\\n⏰ 时间: $(date)\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "ℹ️ SLACK_WEBHOOK_URL未配置，跳过通知"
          fi

      - name: 🚨 发送部署失败通知  
        if: needs.build-and-deploy.result == 'failure'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"❌ Coinfair 部署失败!\\n🌿 分支: ${{ github.ref_name }}\\n👤 操作者: ${{ github.actor }}\\n⏰ 时间: $(date)\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "ℹ️ SLACK_WEBHOOK_URL未配置，跳过通知"
          fi