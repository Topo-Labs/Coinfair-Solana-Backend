name: 🔒 Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天UTC 02:00 (北京时间10:00) 执行安全扫描
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: '扫描类型'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - dependencies-only
          - secrets-only

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🔍 依赖漏洞扫描
  dependency-vulnerability-scan:
    name: 🔍 依赖漏洞扫描
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🦀 安装Rust工具链
        uses: dtolnay/rust-toolchain@stable

      - name: 🔧 安装cargo-audit
        run: cargo install cargo-audit

      - name: 📦 缓存Cargo依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-security-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🔍 运行cargo-audit扫描
        run: |
          echo "🔍 开始依赖漏洞扫描..."
          
          # 更新漏洞数据库
          cargo audit --version
          
          # 执行漏洞扫描
          cargo audit --format json > audit-report.json 2>&1 || true
          cargo audit || true
          
          echo "📊 生成扫描摘要..."
          
          if [ -f audit-report.json ]; then
            # 解析扫描结果
            VULN_COUNT=$(jq -r '.vulnerabilities.count // 0' audit-report.json 2>/dev/null || echo "0")
            echo "🔍 发现漏洞数量: $VULN_COUNT"
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "⚠️ 发现安全漏洞，详见下方报告"
              jq -r '.vulnerabilities.list[]? | "🚨 " + .advisory.id + ": " + .advisory.title' audit-report.json 2>/dev/null || true
            else
              echo "✅ 未发现已知漏洞"
            fi
          else
            echo "⚠️ 无法生成JSON报告，使用文本输出"
          fi

      - name: 📊 依赖许可证检查
        run: |
          echo "📊 检查依赖许可证..."
          
          # 安装cargo-license
          cargo install cargo-license --quiet || true
          
          # 生成许可证报告
          if command -v cargo-license &> /dev/null; then
            cargo license --json > license-report.json 2>/dev/null || true
            cargo license || echo "⚠️ 许可证检查工具不可用"
          else
            echo "⚠️ cargo-license未安装，跳过许可证检查"
          fi

      - name: 📤 上传安全报告
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report-${{ github.sha }}
          path: |
            audit-report.json
            license-report.json
          retention-days: 90

  # 🕵️ 密钥泄露扫描
  secrets-scan:
    name: 🕵️ 密钥泄露扫描
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以扫描所有提交

      - name: 🔍 安装TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

      - name: 🕵️ 扫描密钥泄露
        run: |
          echo "🕵️ 开始扫描潜在的密钥泄露..."
          
          # 扫描Git历史中的密钥
          trufflehog git file://. \
            --json \
            --no-verification \
            --max-depth=50 \
            --include-detectors=all > secrets-report.json 2>&1 || true
          
          # 分析扫描结果
          if [ -f secrets-report.json ]; then
            SECRET_COUNT=$(wc -l < secrets-report.json)
            echo "🔍 扫描完成，发现 $SECRET_COUNT 个潜在密钥"
            
            if [ "$SECRET_COUNT" -gt 0 ]; then
              echo "⚠️ 发现潜在密钥泄露："
              head -10 secrets-report.json | jq -r 'select(.Raw) | "🔑 " + .DetectorName + ": " + .Raw[0:20] + "..."' 2>/dev/null || true
              echo "🚨 请检查完整报告并立即处理任何真实的密钥泄露"
            else
              echo "✅ 未发现明显的密钥泄露"
            fi
          fi

      - name: 🔍 静态文件密钥扫描
        run: |
          echo "🔍 扫描静态文件中的敏感信息..."
          
          # 检查环境配置文件
          echo "📋 检查环境配置文件..."
          find . -name "*.env*" -not -path "./target/*" -exec echo "📄 {}" \; -exec head -5 {} \; || true
          
          # 检查可能包含密钥的文件
          echo "📋 检查其他敏感文件模式..."
          find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.jks" \) \
            -not -path "./target/*" -not -path "./.git/*" -exec ls -la {} \; || true
          
          # 检查硬编码的可疑模式
          echo "📋 检查硬编码密钥模式..."
          grep -r -i -n \
            -E "(password|secret|key|token|api_key).*=.*['\"][^'\"]{10,}" \
            --include="*.rs" --include="*.toml" --include="*.yaml" --include="*.yml" \
            --exclude-dir=target --exclude-dir=.git \
            . | head -20 || echo "✅ 未发现硬编码密钥模式"

      - name: 📤 上传密钥扫描报告
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-report-${{ github.sha }}
          path: secrets-report.json
          retention-days: 90

  # 🔒 Rust安全审计
  rust-security-audit:
    name: 🔒 Rust安全审计
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🦀 安装Rust工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: 📦 缓存Cargo依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rust-security-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🔍 安装安全检查工具
        run: |
          echo "🔧 安装Rust安全工具..."
          cargo install cargo-geiger --quiet || echo "⚠️ cargo-geiger安装失败"
          cargo install cargo-outdated --quiet || echo "⚠️ cargo-outdated安装失败"

      - name: 🔒 运行安全相关的Clippy检查
        run: |
          echo "🔒 运行安全相关的静态分析..."
          
          # 运行安全相关的clippy规则
          cargo clippy --all-targets --all-features -- \
            -W clippy::integer_arithmetic \
            -W clippy::unwrap_used \
            -W clippy::expect_used \
            -W clippy::panic \
            -W clippy::unimplemented \
            -W clippy::todo \
            -W clippy::mem_forget \
            -W clippy::mem_replace_with_uninit \
            -W clippy::cast_ptr_alignment \
            -W clippy::mut_from_ref \
            -A clippy::too_many_arguments \
            || echo "⚠️ 发现潜在安全问题，请查看上方输出"

      - name: 🔍 检查unsafe代码使用
        run: |
          echo "🔍 扫描unsafe代码使用..."
          
          if command -v cargo-geiger &> /dev/null; then
            cargo geiger --format GitHubMarkdown > geiger-report.md 2>/dev/null || true
            
            if [ -f geiger-report.md ]; then
              echo "📊 Unsafe代码统计:"
              cat geiger-report.md
            fi
          else
            echo "⚠️ cargo-geiger不可用，手动扫描unsafe关键字"
            grep -r "unsafe" --include="*.rs" src/ crates/ || echo "✅ 未发现unsafe代码块"
          fi

      - name: 📊 检查过时依赖
        run: |
          echo "📊 检查过时的依赖..."
          
          if command -v cargo-outdated &> /dev/null; then
            echo "⏰ 运行cargo-outdated（30秒超时）..."
            timeout 30s cargo outdated --format json > outdated-report.json 2>/dev/null || echo "⚠️ 依赖检查超时或失败，这在大型项目中很常见"
            timeout 15s cargo outdated || echo "⚠️ 依赖检查失败或超时"
          else
            echo "⚠️ cargo-outdated不可用，跳过过时依赖检查"
          fi

      - name: 📤 上传Rust安全报告
        uses: actions/upload-artifact@v4
        with:
          name: rust-security-report-${{ github.sha }}
          path: |
            geiger-report.md
            outdated-report.json
          retention-days: 90

  # 🌐 网络安全配置检查
  network-security-check:
    name: 🌐 网络安全配置检查
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 检查网络配置安全性
        run: |
          echo "🌐 检查网络安全配置..."
          
          # 检查CORS配置
          echo "📋 检查CORS配置..."
          find . -name "*.rs" -exec grep -l "cors\|CORS" {} \; | while read file; do
            echo "📄 文件: $file"
            grep -n -A 3 -B 3 -i "cors\|allow_origin\|allow_methods" "$file" || true
          done
          
          # 检查TLS/SSL配置
          echo "📋 检查TLS配置..."
          find . -name "*.rs" -o -name "*.toml" -o -name "*.yaml" -o -name "*.yml" | \
            xargs grep -l -i "tls\|ssl\|https\|certificate" | head -10 | while read file; do
              echo "📄 TLS相关文件: $file"
              grep -n -i "tls\|ssl\|https\|cert" "$file" | head -5 || true
          done
          
          # 检查认证配置
          echo "📋 检查认证配置..."
          grep -r -n -i "auth\|jwt\|token\|bearer" --include="*.rs" crates/ | head -10 || true
          
          # 检查数据库连接安全性
          echo "📋 检查数据库连接..."
          grep -r -n "mongodb://\|redis://" --include="*.rs" --include="*.env*" . | \
            grep -v "localhost\|127.0.0.1" || echo "✅ 未发现外部数据库连接"

      - name: 🔍 检查输入验证
        run: |
          echo "🔍 检查输入验证机制..."
          
          # 检查validator使用
          echo "📋 检查输入验证库使用..."
          grep -r -n "validator\|Validate\|#\[validate" --include="*.rs" crates/ | head -10 || true
          
          # 检查SQL注入防护（虽然使用MongoDB，但检查一般注入防护）
          echo "📋 检查注入攻击防护..."
          grep -r -n -i "sanitize\|escape\|validate_input" --include="*.rs" crates/ || echo "⚠️ 建议添加更多输入验证"

  # 📋 生成安全报告
  security-summary:
    name: 📋 安全扫描总结
    runs-on: ubuntu-latest
    needs: [dependency-vulnerability-scan, secrets-scan, rust-security-audit, network-security-check]
    if: always()
    
    steps:
      - name: 📥 检出代码  
        uses: actions/checkout@v4

      - name: 📥 下载所有安全报告
        uses: actions/download-artifact@v4
        with:
          pattern: '*-report-${{ github.sha }}'
          path: security-reports/

      - name: 📋 生成安全总结报告
        run: |
          echo "📋 生成综合安全报告..."
          
          cat > security-summary.md << EOF
          # 🔒 Coinfair安全扫描报告
          
          **扫描时间**: $(date)  
          **Git分支**: ${{ github.ref_name }}  
          **提交哈希**: ${{ github.sha }}  
          **扫描类型**: ${{ github.event.inputs.scan_type || 'automatic' }}
          
          ## 📊 扫描概述
          
          | 扫描类型 | 状态 | 结果 |
          |---------|-----|------|
          | 依赖漏洞扫描 | ${{ needs.dependency-vulnerability-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.dependency-vulnerability-scan.result }} |
          | 密钥泄露扫描 | ${{ needs.secrets-scan.result == 'success' && '✅' || '❌' }} | ${{ needs.secrets-scan.result }} |
          | Rust安全审计 | ${{ needs.rust-security-audit.result == 'success' && '✅' || '❌' }} | ${{ needs.rust-security-audit.result }} |
          | 网络安全检查 | ${{ needs.network-security-check.result == 'success' && '✅' || '❌' }} | ${{ needs.network-security-check.result }} |
          
          ## 🔍 详细结果
          
          ### 依赖漏洞
          - 扫描了所有Rust依赖包
          - 检查了已知CVE漏洞数据库
          - 验证了许可证合规性
          
          ### 密钥安全
          - 扫描了Git历史记录
          - 检查了配置文件
          - 验证了硬编码密钥模式
          
          ### 代码安全
          - 运行了安全相关的Clippy规则
          - 检查了unsafe代码使用
          - 分析了过时依赖风险
          
          ### 网络安全
          - 验证了CORS配置
          - 检查了TLS/SSL设置
          - 评估了认证机制
          
          ## 🚨 建议行动
          
          1. **高优先级**: 立即修复任何发现的CVE漏洞
          2. **中优先级**: 更新过时的依赖包
          3. **低优先级**: 优化代码质量和安全最佳实践
          
          ## 📞 联系方式
          
          如有安全问题，请联系安全团队或在GitHub Issues中报告。
          
          ---
          *此报告由GitHub Actions自动生成*
          EOF
          
          echo "✅ 安全报告生成完成"

      - name: 📤 上传综合安全报告
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-${{ github.sha }}
          path: security-summary.md
          retention-days: 180

      - name: 🚨 发送安全通知
        if: contains(needs.*.result, 'failure')
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"🚨 Coinfair安全扫描发现问题!\n📋 分支: ${{ github.ref_name }}\n👤 提交者: ${{ github.actor }}\n⏰ 时间: $(date)\n🔗 查看详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n⚠️ 请立即检查安全报告并采取必要措施\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "ℹ️ SLACK_WEBHOOK_URL未配置，跳过通知"
          fi

      - name: ✅ 发送成功通知
        if: needs.dependency-vulnerability-scan.result == 'success' && needs.secrets-scan.result == 'success'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"✅ Coinfair安全扫描通过!\n📋 分支: ${{ github.ref_name }}\n👤 提交者: ${{ github.actor }}\n⏰ 时间: $(date)\n🔍 所有安全检查均通过，系统安全状态良好\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "ℹ️ SLACK_WEBHOOK_URL未配置，跳过通知"
          fi